# docker-compose.yml
version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  user-service:
    build: ./user-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - kafka

  load-service:
    build: ./load-service
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - kafka
      - user-service

# kubernetes/
# 1. namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: ntruck

# 2. configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ntruck-config
  namespace: ntruck
data:
  NODE_ENV: "production"
  KAFKA_BROKERS: "kafka-service:9092"

# 3. secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ntruck-secrets
  namespace: ntruck
type: Opaque
data:
  MONGODB_URI: <base64-encoded-uri>
  JWT_SECRET: <base64-encoded-secret>

# 4. kafka-deployment.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: ntruck
spec:
  serviceName: kafka-service
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:latest
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-service:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://:9092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "3"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: ntruck
spec:
  selector:
    app: kafka
  ports:
  - port: 9092
    targetPort: 9092
  clusterIP: None

# 5. user-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: ntruck
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: user-service:latest
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: ntruck-config
        - secretRef:
            name: ntruck-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: ntruck
spec:
  selector:
    app: user-service
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

# 6. load-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-service
  namespace: ntruck
spec:
  replicas: 2
  selector:
    matchLabels:
      app: load-service
  template:
    metadata:
      labels:
        app: load-service
    spec:
      containers:
      - name: load-service
        image: load-service:latest
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: ntruck-config
        - secretRef:
            name: ntruck-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: load-service
  namespace: ntruck
spec:
  selector:
    app: load-service
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

# 7. ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ntruck-ingress
  namespace: ntruck
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: api.ntruck.com
    http:
      paths:
      - path: /users
        pathType: Prefix
        backend:
          service:
            name: user-service
            port:
              number: 3000
      - path: /loads
        pathType: Prefix
        backend:
          service:
            name: load-service
            port:
              number: 3000